
/**
 *	Bundler  - bundle the browserify dependece and turn it on a angular module.
 *  	developer by: @leualemax in 10/12/2015
 **/
/* eslint no-restricted-modules: ["error", "fs", "cluster"]  */
var gulp = require('gulp');
var browserify = require('browserify');
var gutil = require('gulp-util');
var colors = require('colors');
var brfs = require('brfs');
var rename = require('gulp-rename');
var gulpHeader = require('gulp-header');
var vinylSource = require('vinyl-source-stream');
var vinylBuffer = require('vinyl-buffer');

var bundle = {
  revName: function(fileUrl, ext) {
    var fileStream = fileUrl.split("/");
    return (ext) ? fileStream[fileStream.length - 1] :
        fileStream[fileStream.length - 1].split(".js")[0];
  },
  compile: function(location, destination, callback) {
    var comment = colors.yellow("compile javascript libs of components: ");
    console.log(comment, location);
    var message = [
      '/*-----------------------------------------------------',
      ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
      ' |               4D 6F 62 6C 65 74 73                 |',
      ' | This file was generated by Browserify for moblets. |',
      ' | All modifications to it will be lost, mercilessly! |',
      ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
      ' -----------------------------------------------------*/\n\n'
    ].join('\n');
    location = (typeof location === "string") ? [location] : location;
    var outputs = [];
    location.map(function(entry) {
      console.log(colors.yellow('now building:'), entry);
      return browserify({entries: [entry], transform: [brfs]})
            .bundle()
            .on('error', gutil.log.bind(gutil, 'Browserify Error'))
            .pipe(vinylSource(bundle.revName(entry, true)))
            .pipe(vinylBuffer())
            .pipe(gulpHeader(message))
            .pipe(rename({extname: '.bundle.js'}))
            .pipe(gulp.dest(destination))
            .on('end', function() {
              outputs.push(
                destination + bundle.revName(entry, false) + ".bundle.js");
              if (outputs.length === location.length) {
                if (typeof callback === 'function') {
                  callback(outputs);
                }
              }
            });
    });
  }
};

module.exports = bundle;
