{"version":3,"sources":["rules/newlineAfterDescription.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;kBAGe,4BAAa,gBAItB;QAHF,mBAGE;QAFF,qBAEE;QADF,uBACE;;AACF,QAAI,kBAAJ,CADE;;AAGF,QAAI,CAAC,MAAM,WAAN,IAAqB,CAAC,MAAM,IAAN,CAAW,MAAX,EAAmB;AAC1C,eAD0C;KAA9C;;AAIA,QAAI,mBAAM,QAAQ,OAAR,EAAiB,CAAvB,CAAJ,EAA+B;AAC3B,iBAAS,QAAQ,OAAR,CAAgB,CAAhB,MAAuB,QAAvB,CADkB;KAA/B,MAEO;AACH,iBAAS,IAAT,CADG;KAFP;;;;;AAPE,QAgBI,8BAA8B,0BAAa,MAAM,MAAN,CAAa,KAAb,CAAmB,MAAM,WAAN,CAAkB,MAAlB,CAAhC,EAA2D,MAA3D,CAA9B,CAhBJ;;AAkBF,QAAI,MAAJ,EAAY;AACR,YAAI,CAAC,2BAAD,EAA8B;AAC9B,mBAAO,mEAAP,EAD8B;SAAlC;KADJ,MAIO;AACH,YAAI,2BAAJ,EAAiC;AAC7B,mBAAO,oEAAP,EAD6B;SAAjC;KALJ;CAtBwB","file":"rules/newlineAfterDescription.js","sourcesContent":["import _ from 'lodash';\nimport iterateJsdoc from './../iterateJsdoc';\n\nexport default iterateJsdoc(({\n    jsdoc,\n    report,\n    context\n}) => {\n    let always;\n\n    if (!jsdoc.description || !jsdoc.tags.length) {\n        return;\n    }\n\n    if (_.has(context.options, 0)) {\n        always = context.options[0] === 'always';\n    } else {\n        always = true;\n    }\n\n    // The contents of the jsdoc.source and of jsdoc.description is left trimmed.\n    // The contents of the jsdoc.description is right trimmed.\n    // This gets the text following the description.\n    const descriptionEndsWithANewline = _.startsWith(jsdoc.source.slice(jsdoc.description.length), '\\n\\n');\n\n    if (always) {\n        if (!descriptionEndsWithANewline) {\n            report('There must be a newline after the description of the JSDoc block.');\n        }\n    } else {\n        if (descriptionEndsWithANewline) {\n            report('There must be no newline after the description of the JSDoc block.');\n        }\n    }\n});\n"],"sourceRoot":"/source/"}