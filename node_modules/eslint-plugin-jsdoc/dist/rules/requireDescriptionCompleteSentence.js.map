{"version":3,"sources":["rules/requireDescriptionCompleteSentence.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAM,oBAAoB,SAApB,iBAAoB,CAAC,IAAD,EAAU;AAChC,WAAO,KAAK,KAAL,CAAW,MAAX,CAAP,CADgC;CAAV;;AAI1B,IAAM,6BAA6B,SAA7B,0BAA6B,CAAC,IAAD,EAAU;AACzC,QAAI,gCAAJ,CADyC;;AAGzC,QAAM,QAAQ,KAAK,KAAL,CAAW,IAAX,CAAR,CAHmC;;AAKzC,WAAO,CAAC,oBAAO,KAAP,EAAc,UAAC,IAAD,EAAU;AAC5B,YAAI,yBAAY,oBAAZ,KAAqC,CAAC,oBAAD,IAAyB,SAAS,IAAT,CAAc,IAAd,CAA9D,EAAmF;AACnF,mBAAO,IAAP,CADmF;SAAvF;;AAIA,+BAAuB,MAAM,IAAN,CAAW,IAAX,CAAvB,CAL4B;;AAO5B,eAAO,KAAP,CAP4B;KAAV,CAAf,CALkC;CAAV;;AAgBnC,IAAM,sBAAsB,SAAtB,mBAAsB,CAAC,WAAD,EAAc,MAAd,EAAyB;AACjD,QAAI,CAAC,WAAD,EAAc;AACd,eAAO,KAAP,CADc;KAAlB;;AAIA,QAAM,aAAa,kBAAkB,WAAlB,CAAb,CAL2C;;AAOjD,WAAO,oBAAO,UAAP,EAAmB,UAAC,SAAD,EAAY,KAAZ,EAAsB;AAC5C,YAAI,CAAC,SAAS,IAAT,CAAc,SAAd,CAAD,EAA2B;AAC3B,gBAAI,UAAU,CAAV,EAAa;AACb,uBAAO,qDAAP,EADa;aAAjB,MAEO;AACH,uBAAO,mDAAP,EADG;aAFP;;AAMA,mBAAO,IAAP,CAP2B;SAA/B;;AAUA,YAAI,CAAC,MAAM,IAAN,CAAW,SAAX,CAAD,EAAwB;AACxB,mBAAO,kCAAP,EADwB;;AAGxB,mBAAO,IAAP,CAHwB;SAA5B;;AAMA,YAAI,CAAC,2BAA2B,SAA3B,CAAD,EAAwC;AACxC,mBAAO,sGAAP,EADwC;;AAGxC,mBAAO,IAAP,CAHwC;SAA5C;;AAMA,eAAO,KAAP,CAvB4C;KAAtB,CAA1B,CAPiD;CAAzB;;kBAkCb,4BAAa,gBAGtB;QAFF,mBAEE;QADF,qBACE;;AACF,QAAI,oBAAoB,MAAM,WAAN,EAAmB,MAAvC,CAAJ,EAAoD;AAChD,eADgD;KAApD;;AAIA,QAAM,OAAO,sBAAS,MAAM,IAAN,EAAY,UAAC,GAAD,EAAS;AACvC,eAAO,wBAAW,CAAC,OAAD,EAAU,SAAV,CAAX,EAAiC,IAAI,GAAJ,CAAxC,CADuC;KAAT,CAA5B,CALJ;;AASF,wBAAO,IAAP,EAAa,UAAC,GAAD,EAAS;AAClB,YAAM,cAAc,yBAAY,IAAI,WAAJ,EAAiB,IAA7B,CAAd,CADY;;AAGlB,eAAO,oBAAoB,WAApB,EAAiC,MAAjC,CAAP,CAHkB;KAAT,CAAb,CATE;CAHsB","file":"rules/requireDescriptionCompleteSentence.js","sourcesContent":["import _ from 'lodash';\nimport iterateJsdoc from './../iterateJsdoc';\n\nconst extractParagraphs = (text) => {\n    return text.split(/\\n\\n/);\n};\n\nconst isNewLinePrecededByAPeriod = (text) => {\n    let lastLineEndsSentence;\n\n    const lines = text.split('\\n');\n\n    return !_.some(lines, (line) => {\n        if (_.isBoolean(lastLineEndsSentence) && !lastLineEndsSentence && /^[A-Z]/.test(line)) {\n            return true;\n        }\n\n        lastLineEndsSentence = /\\.$/.test(line);\n\n        return false;\n    });\n};\n\nconst validateDescription = (description, report) => {\n    if (!description) {\n        return false;\n    }\n\n    const paragraphs = extractParagraphs(description);\n\n    return _.some(paragraphs, (paragraph, index) => {\n        if (!/^[A-Z]/.test(paragraph)) {\n            if (index === 0) {\n                report('Description must start with an uppercase character.');\n            } else {\n                report('Paragraph must start with an uppercase character.');\n            }\n\n            return true;\n        }\n\n        if (!/\\.$/.test(paragraph)) {\n            report('Sentence must end with a period.');\n\n            return true;\n        }\n\n        if (!isNewLinePrecededByAPeriod(paragraph)) {\n            report('A line of text is started with an uppercase character, but preceding line does not end the sentence.');\n\n            return true;\n        }\n\n        return false;\n    });\n};\n\nexport default iterateJsdoc(({\n    jsdoc,\n    report\n}) => {\n    if (validateDescription(jsdoc.description, report)) {\n        return;\n    }\n\n    const tags = _.filter(jsdoc.tags, (tag) => {\n        return _.includes(['param', 'returns'], tag.tag);\n    });\n\n    _.some(tags, (tag) => {\n        const description = _.trimStart(tag.description, '- ');\n\n        return validateDescription(description, report);\n    });\n});\n"],"sourceRoot":"/source/"}