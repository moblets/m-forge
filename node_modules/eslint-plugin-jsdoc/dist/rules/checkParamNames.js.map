{"version":3,"sources":["rules/checkParamNames.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAGA,IAAM,yBAAyB,SAAzB,sBAAyB,CAAC,aAAD,EAAyB,sBAAzB,EAAiE,mBAAjE,EAAsG,MAAtG,EAA4H;AACvJ,WAAO,oBAAO,mBAAP,EAA4B,UAAC,kBAAD,EAAqB,KAArB,EAA+B;AAC9D,YAAM,wBAAwB,uBAAuB,KAAvB,CAAxB,CADwD;;AAG9D,YAAI,CAAC,qBAAD,EAAwB;AACxB,mBAAO,MAAM,aAAN,GAAsB,IAAtB,GAA6B,kBAA7B,GAAkD,kDAAlD,CAAP,CADwB;;AAGxB,mBAAO,IAAP,CAHwB;SAA5B;;AAMA,YAAI,0BAA0B,iBAA1B,EAA6C;AAC7C,mBAD6C;SAAjD;;AAIA,YAAI,0BAA0B,kBAA1B,EAA8C;AAC9C,mBAAO,eAAe,aAAf,GAA+B,gBAA/B,GAAkD,uBAAuB,IAAvB,CAA4B,IAA5B,CAAlD,GAAsF,UAAtF,GAAmG,oBAAoB,IAApB,CAAyB,IAAzB,CAAnG,GAAoI,IAApI,CAAP,CAD8C;;AAG9C,mBAAO,IAAP,CAH8C;SAAlD;;AAMA,eAAO,KAAP,CAnB8D;KAA/B,CAAnC,CADuJ;CAA5H;;AAwB/B,IAAM,6BAA6B,SAA7B,0BAA6B,CAAC,aAAD,EAAyB,mBAAzB,EAA8D,MAA9D,EAAoF;AACnH,QAAI,6BAAJ,CADmH;;AAGnH,WAAO,oBAAO,mBAAP,EAA4B,UAAC,kBAAD,EAAwB;AACvD,YAAM,iBAAiB,wBAAW,kBAAX,EAA+B,GAA/B,CAAjB,CADiD;;AAGvD,YAAI,cAAJ,EAAoB;AAChB,gBAAI,CAAC,iBAAD,EAAoB;AACpB,uBAAO,MAAM,aAAN,GAAsB,sBAAtB,GAA+C,kBAA/C,GAAoE,uCAApE,CAAP,CADoB;;AAGpB,uBAAO,IAAP,CAHoB;aAAxB;;AAMA,gBAAM,mBAAmB,mBAAmB,KAAnB,CAAyB,CAAzB,EAA4B,mBAAmB,OAAnB,CAA2B,GAA3B,CAA5B,CAAnB,CAPU;;AAShB,gBAAI,qBAAqB,iBAArB,EAAwC;AACxC,uBAAO,MAAM,aAAN,GAAsB,sBAAtB,GAA+C,kBAA/C,GAAoE,sBAApE,GAA6F,gBAA7F,GAAgH,mDAAhH,GAAsK,iBAAtK,GAA0L,KAA1L,CAAP,CADwC;;AAGxC,uBAAO,IAAP,CAHwC;aAA5C;SATJ,MAcO;AACH,gCAAoB,kBAApB,CADG;SAdP;;AAkBA,eAAO,KAAP,CArBuD;KAAxB,CAAnC,CAHmH;CAApF;;kBA4BpB,4BAAa,gBAGtB;QAFF,qBAEE;QADF,mBACE;;AACF,QAAM,yBAAyB,MAAM,yBAAN,EAAzB,CADJ;AAEF,QAAM,sBAAsB,MAAM,sBAAN,EAAtB,CAFJ;AAGF,QAAM,0BAA0B,MAAM,0BAAN,EAA1B,CAHJ;AAIF,QAAM,gBAAgB,MAAM,mBAAN,CAA0B,OAA1B,CAAhB,CAJJ;AAKF,QAAM,UAAU,uBAAuB,aAAvB,EAAsC,sBAAtC,EAA8D,mBAA9D,EAAmF,MAAnF,CAAV,CALJ;;AAOF,QAAI,OAAJ,EAAa;AACT,eADS;KAAb;;AAIA,+BAA2B,aAA3B,EAA0C,uBAA1C,EAAmE,MAAnE,EAXE;CAHsB","file":"rules/checkParamNames.js","sourcesContent":["import _ from 'lodash';\nimport iterateJsdoc from './../iterateJsdoc';\n\nconst validateParameterNames = (targetTagName : string, functionParameterNames : Array<string>, jsdocParameterNames : Array<string>, report : Function) => {\n    return _.some(jsdocParameterNames, (jsdocParameterName, index) => {\n        const functionParameterName = functionParameterNames[index];\n\n        if (!functionParameterName) {\n            report('@' + targetTagName + ' \"' + jsdocParameterName + '\" does not match an existing function parameter.');\n\n            return true;\n        }\n\n        if (functionParameterName === '<ObjectPattern>') {\n            return;\n        }\n\n        if (functionParameterName !== jsdocParameterName) {\n            report('Expected @' + targetTagName + ' names to be \"' + functionParameterNames.join(', ') + '\". Got \"' + jsdocParameterNames.join(', ') + '\".');\n\n            return true;\n        }\n\n        return false;\n    });\n};\n\nconst validateParameterNamesDeep = (targetTagName : string, jsdocParameterNames : Array<string>, report : Function) => {\n    let lastRealParameter;\n\n    return _.some(jsdocParameterNames, (jsdocParameterName) => {\n        const isPropertyPath = _.includes(jsdocParameterName, '.');\n\n        if (isPropertyPath) {\n            if (!lastRealParameter) {\n                report('@' + targetTagName + ' path declaration (\"' + jsdocParameterName + '\") appears before any real parameter.');\n\n                return true;\n            }\n\n            const pathRootNodeName = jsdocParameterName.slice(0, jsdocParameterName.indexOf('.'));\n\n            if (pathRootNodeName !== lastRealParameter) {\n                report('@' + targetTagName + ' path declaration (\"' + jsdocParameterName + '\") root node name (\"' + pathRootNodeName + '\") does not match previous real parameter name (\"' + lastRealParameter + '\").');\n\n                return true;\n            }\n        } else {\n            lastRealParameter = jsdocParameterName;\n        }\n\n        return false;\n    });\n};\n\nexport default iterateJsdoc(({\n    report,\n    utils\n}) => {\n    const functionParameterNames = utils.getFunctionParameterNames();\n    const jsdocParameterNames = utils.getJsdocParameterNames();\n    const jsdocParameterNamesDeep = utils.getJsdocParameterNamesDeep();\n    const targetTagName = utils.getPreferredTagName('param');\n    const isError = validateParameterNames(targetTagName, functionParameterNames, jsdocParameterNames, report);\n\n    if (isError) {\n        return;\n    }\n\n    validateParameterNamesDeep(targetTagName, jsdocParameterNamesDeep, report);\n});\n"],"sourceRoot":"/source/"}